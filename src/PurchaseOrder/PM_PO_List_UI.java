/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PurchaseOrder;

/**
 *
 * @author User
 */
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import TextFile_Handler.TextFile;
import PurchaseOrder.PO_GenerationManagement;
import auth.Session;
import auth.User;
public class PM_PO_List_UI extends javax.swing.JFrame {

    private DefaultTableModel model;
    public PM_PO_List_UI() {
        initComponents();
        
        model = new DefaultTableModel(
                new String[]{"No", "PO ID", "PR ID", "Date", "PO Created By (Name)", "PO Created By (ID)", 
                    "PR Created By (Name)", "PR Created By (ID)", "Expected Delivery Date", "Supplier Name",
                    "Supplier ID",  "Item Name", "Item Code", "Quantity", "Status", "PO Approved By (Name)", "PO Approved By (ID)", "Payment Status"}, 
                0 );
        
        PurchaseOrderTable.setModel(model);

        displayPOTable();
    }
    
    private void displayPOTable() {
        model.setRowCount(0);
        User currentUser = Session.getInstance().getCurrentUser();
        String currentPMID = currentUser.getID();
        List<PurchaseOrder> poList = PO_GenerationManagement.getAllPurchaseOrders(); 
        int no = 1;
        for (PurchaseOrder po : poList) {
            if (!po.getPOCreatedByID().equals(currentPMID)) {
                continue;
            }
            String supplierName = po.getSP_Name().replace("{", "").replace("}", "");
            String supplierID = po.getSP_ID().replace("{", "").replace("}", "");
            String itemName = po.getItemName().replace("{", "").replace("}", "");
            String itemCode = po.getItemCode().replace("{", "").replace("}", "");

            // Use the full quantity string from the map
            String quantity = PO_GenerationManagement.getOriginalQuantity(po.getPO_ID());

            Object[] rowData = {
                no++,
                po.getPO_ID(),
                po.getPR_ID(),
                po.getDate(),
                po.getPOCreatedByName(),
                po.getPOCreatedByID(),
                po.getPRCreatedByName(),
                po.getPRCreatedByID(),
                po.getExpectedDeliveryDate(),
                supplierName,
                supplierID,
                itemName,
                itemCode,
                quantity,
                po.getStatus(),
                po.getPOApprovedByName(),
                po.getPOApprovedByID(),
                po.getPaymentStatus()
            };
            model.addRow(rowData);
        }
    }
    
    private void deletePO(){
        int selectedIndex = PurchaseOrderTable.getSelectedRow();
        if (selectedIndex != -1) {
            // Access the list of purchase orders
            List<PurchaseOrder> POList = PO_GenerationManagement.getAllPurchaseOrders();

            if (selectedIndex >= POList.size()) {
                JOptionPane.showMessageDialog(this, "Selected row is out of bounds.");
                return;
            }

            // Get the selected PO
            PurchaseOrder selectedPO = POList.get(selectedIndex);

            // Check status before deleting
            if ("Complete".equalsIgnoreCase(selectedPO.getStatus())) {
                JOptionPane.showMessageDialog(this, "Cannot delete. This Purchase Order is already approved (Complete).");
                return;
            }

            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Purchase Order?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                boolean deleted = PO_GenerationManagement.deletePurchaseOrder(selectedPO.getPO_ID());
                if (deleted) {
                    JOptionPane.showMessageDialog(this, "Purchase Order deleted successfully.");
                    displayPOTable(); // Refresh the table
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete Purchase Order. Please try again.");
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PurchaseOrderTable = new javax.swing.JTable();
        RefreshButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        PurchaseOrderTable.getTableHeader().setReorderingAllowed(false);
        PurchaseOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "PO ID", "PR ID", "Date", "PM Name", "PM ID", "SM Name", "SM ID", "Expected Delivery Date", "Supplier Name", "Supplier ID", "Item Name", "Item Code", "Quantity", "Purchase Order Status", "Approved By", "Username", "Payment Status"
            }
        ));
        jScrollPane1.setViewportView(PurchaseOrderTable);

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setText("Puchase Manager Purchase Order List");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(17, 17, 17))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(573, 573, 573)
                        .addComponent(RefreshButton)
                        .addGap(52, 52, 52)
                        .addComponent(EditButton)
                        .addGap(55, 55, 55)
                        .addComponent(DeleteButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addContainerGap(384, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshButton)
                    .addComponent(EditButton)
                    .addComponent(DeleteButton))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        //Edit
        int selectedIndex = PurchaseOrderTable.getSelectedRow();
        if (selectedIndex != -1) {
            // Access the list of purchase orders
            List<PurchaseOrder> POList =  PO_GenerationManagement.getAllPurchaseOrders();

            if (selectedIndex >= POList.size()) {
                JOptionPane.showMessageDialog(this, "Selected row is out of bounds.");
                return;
            }

            // Get the selected row's corresponding PurchaseOrder
            PurchaseOrder selectedRow = POList.get(selectedIndex);

            // Validate status before allowing edit
            if ("Complete".equalsIgnoreCase(selectedRow.getStatus())) {
                JOptionPane.showMessageDialog(this, "Cannot edit. This Purchase Order is already approved (Complete).");
            }
            else if ("Rejected".equalsIgnoreCase(selectedRow.getStatus())){
                JOptionPane.showMessageDialog(this, "Cannot edit. This Purchase Order is already rejected (Rejected).");
            }
            else {
                // Redirect to CRUD UI for editing
                PO_CRUD_UI crudUI = new PO_CRUD_UI(selectedRow);
                crudUI.setVisible(true);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        //Refresh
        displayPOTable();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // Delete
        deletePO();
    }//GEN-LAST:event_DeleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PM_PO_List_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PM_PO_List_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PM_PO_List_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PM_PO_List_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PM_PO_List_UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTable PurchaseOrderTable;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
